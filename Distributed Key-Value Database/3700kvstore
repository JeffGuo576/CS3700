#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os
import random

BROADCAST = "FFFF"

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        
        self.database = {}
        self.state = "follower"
        self.term = 0
        self.votes = []
        self.leader = "0000"
        
        self.electionTimer = time.time()
        self.electionTimeOut = random.uniform(0.15, 0.3) # random from 150-300ms

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    # sends message
    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    # runs
    def run(self):
        while True:
            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')
            msg = json.loads(msg)
            print("Received message '%s'" % (msg,), flush=True)
            
            # if there's an election timeout start an election
            # there is an election when there isn't a leader or there is a timeout
            if self.id != self.leader:
                if self.electionTimer == self.electionTimeOut:
                    self.electionTimer = time.time() 
                    self.election()
            else:
                self.AppendEntries()
            
            self.handleResponse(msg)
                
    # handles responses from server such as
    # get, put, vote, request votes, and append entries responses
    def handleResponse(self, msg):
        type = msg["type"]
        if type == "get":
            self.response_to_get(msg)
        elif type == "put":
            self.response_to_put(msg)
        elif type == "vote":
            self.response_to_vote(msg)
        elif type == "RequestVote":
            self.response_to_req_vote(msg)
        elif type == "AppendEntries":
            self.response_to_append(msg)
    
    # starts an election and sends a vote request to all replicas
    def election(self):
        # start election
        self.term += 1
        self.state = "candidate"
        # vote for self
        self.votes.append(self.id)
        self.leader = "FFFF"
        
        # send vote requests
        for other in self.others:
            self.RequestVote(other)
        self.electionTimer = time.time()  
              
    # sends an append entry msg
    def AppendEntries(self):
        for other in self.others:
            msg = {"src": self.id,
                   "dst": other,
                   "leader": self.leader,
                   "term": self.term,
                   "type": "AppendEntries"}
            self.send(msg)

    # sends a vote request
    def RequestVote(self, replica):
        request = {"src": self.id,
                   "dst": replica,
                   "leader": self.leader,
                   "type": "RequestVote"}
        self.send(request)
    
    # sends a response to request vote message
    def response_to_req_vote(self, msg):
        vote = {"src": self.id,
                "dst": msg["src"],
                "leader": self.leader,
                "type": "vote"}
        self.send(vote)
        self.electionTimeOut = random.uniform(0.15, 0.3)
        self.electionTimer = time.time()
    
    # response to append entry messages
    def response_to_append(self, msg):
        # if append entry is from a leader, condidate becomes follower
        if self.term <= msg["term"]:
            self.state = "follower"
            self.votes = []
            self.term = msg["term"]
            self.leader = msg["leader"]
        self.electionTimer = time.time() 
    
    # responds to vote messages
    def response_to_vote(self, msg):
        self.votes.append(msg["src"])
        majority = math.ceil((len(self.others)+1)/2)
        # if num votes for candidate is majority
        if len(self.votes) > majority:
            self.state = "leader"
            self.leader = self.id
            self.AppendEntries()
            #self.Heartbeat()

    # sends redirect msg if the replica is not the leader
    def redirect(self, request):
        msg = {"src": self.id,
               "dst": request["src"],
               "leader": self.leader,
               "type": "redirect",
               "MID": request["MID"]}
        self.send(msg)
    
    # responds to get msg. if this replica is not the leader it sends a redirect
    # otherwise it gets data. depending on whether the specified data is stored,
    # sends fail or ok msg
    def response_to_get(self, request):
        msg = None
        if self.id == "FFFF":
            return
        
        if request["leader"] != self.id:
            self.redirect(request)
        else:
            if self.database.get(request["key"]) == None:
                msg = {"src": self.id,
                    "dst": request["src"],
                    "leader": self.leader,
                    "type": "fail",
                    "MID": request["MID"]}
            else:
                msg = {"src": self.id,
                    "dst": request["src"],
                    "leader": self.leader,
                    "type": "ok",
                    "MID": request["MID"],
                    "key": request["key"],
                    "value": self.database[request["key"]]}
            self.send(msg)
    
    # responds to put msg. if this replica isn't the leader it sends a redirect msg.
    # if the specified data has not been stored, it stores that data and sends an ok msg. 
    # Otherwise it sends a fail msg
    def response_to_put(self, request):
        msg = None
        if self.id == "FFFF":
            return
        
        if request["leader"] != self.id:
            self.redirect(request)
        else:
            if self.database.get(request["key"]) == None:
                msg = {"src": self.id,
                    "dst": request["src"],
                    "leader": self.leader,
                    "type": "ok",
                    "MID": request["MID"]}
                self.database[request["key"]] = request["value"]
            else:
                msg = {"src": self.id,
                    "dst": request["src"],
                    "leader": self.leader,
                    "type": "fail",
                    "MID": request["MID"]}
            self.send(msg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()