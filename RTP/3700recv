#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        self.sentPackets = {} #storing packets
        self.sequence_number = 0
        self.sent_acks = {}

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't alreadt have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]
                msg = json.loads(data.decode('utf-8'))
                msg["printed"] = False
                if msg['seq_num'] not in self.sentPackets and msg['seq_num']:
                    self.sentPackets[msg['seq_num']] = msg
                    self.sentPackets = dict(sorted(self.sentPackets.items()))
                    if msg['seq_num'] == self.sequence_number + 1375:
                        self.sequence_number += len(msg['data'])
                        print(msg["data"], end='', flush=True)
                        self.log("Received data message %s" % msg)
                        msg["printed"] = True
                        for sequence_number in self.sentPackets.keys():
                            if sequence_number == self.sequence_number + 1375:
                                packet = self.sentPackets[sequence_number]
                                print(packet["data"], end='', flush=True)
                                self.log("Received data message %s" % msg)
                                packet["printed"] = True
                                self.sequence_number += len(packet["data"])

                if msg['seq_num'] not in self.sent_acks:
                    msg = {
                    "type": "ack",
                    "given_num": msg['seq_num'],
                    "printed": msg['printed'],
                    "send_time": msg['send_time']
                    }
                    msg = json.dumps(msg)
                    self.send(msg)
                    self.log('Sent ACK back')
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
